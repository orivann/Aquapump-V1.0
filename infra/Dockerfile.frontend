FROM node:22-alpine AS base
RUN apk add --no-cache libc6-compat curl dumb-init git
WORKDIR /app

FROM base AS deps
RUN npm install -g bun@latest
COPY package.json bun.lock* ./
RUN bun install --frozen-lockfile

FROM base AS builder
WORKDIR /app
RUN npm install -g bun@latest @expo/cli
COPY --from=deps /app/node_modules ./node_modules
COPY package.json bun.lock* tsconfig.json ./
COPY frontend/app.json ./app.json
COPY app ./app
COPY frontend/assets ./assets
COPY components ./components
COPY constants ./constants
COPY contexts ./contexts
COPY lib ./lib
COPY frontend ./frontend

ARG EXPO_PUBLIC_API_URL
ARG EXPO_PUBLIC_SUPABASE_URL
ARG EXPO_PUBLIC_SUPABASE_ANON_KEY
ARG EXPO_PUBLIC_TOOLKIT_URL

ENV NODE_ENV=production
ENV EXPO_USE_FAST_RESOLVER=1
ENV EXPO_PUBLIC_RORK_API_BASE_URL=${EXPO_PUBLIC_API_URL}
ENV EXPO_PUBLIC_SUPABASE_URL=${EXPO_PUBLIC_SUPABASE_URL}
ENV EXPO_PUBLIC_SUPABASE_ANON_KEY=${EXPO_PUBLIC_SUPABASE_ANON_KEY}
ENV EXPO_PUBLIC_TOOLKIT_URL=${EXPO_PUBLIC_TOOLKIT_URL}

RUN npx expo export --platform web --output-dir dist

FROM nginx:alpine AS runner

RUN apk add --no-cache curl

COPY --from=builder /app/dist /usr/share/nginx/html

COPY infra/nginx.conf /etc/nginx/nginx.conf

EXPOSE 8080

HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8080 || exit 1

CMD ["nginx", "-g", "daemon off;"]
