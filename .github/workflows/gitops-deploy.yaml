name: GitOps - Build, Push & Deploy

on:
  push:
    branches:
      - main
      - staging
      - dev
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

  update-gitops-repo:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: your-org/aquapump-gitops
          token: ${{ secrets.GITOPS_PAT }}
          path: gitops

      - name: Update image tag
        run: |
          cd gitops
          
          BRANCH="${{ github.ref_name }}"
          IMAGE_TAG="${{ github.sha }}"
          
          if [ "$BRANCH" = "main" ]; then
            ENV="production"
          elif [ "$BRANCH" = "staging" ]; then
            ENV="staging"
          elif [ "$BRANCH" = "dev" ]; then
            ENV="dev"
          else
            echo "Unknown branch: $BRANCH"
            exit 1
          fi
          
          VALUES_FILE="environments/${ENV}/values.yaml"
          
          sed -i "s|tag:.*|tag: \"${IMAGE_TAG}\"|g" ${VALUES_FILE}
          
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add ${VALUES_FILE}
          git commit -m "Update ${ENV} image to ${IMAGE_TAG}" || echo "No changes to commit"
          git push origin main

      - name: Trigger Argo CD sync
        run: |
          BRANCH="${{ github.ref_name }}"
          
          if [ "$BRANCH" = "main" ]; then
            APP_NAME="aquapump-production"
          elif [ "$BRANCH" = "staging" ]; then
            APP_NAME="aquapump-staging"
          elif [ "$BRANCH" = "dev" ]; then
            APP_NAME="aquapump-dev"
          fi
          
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://argocd.example.com/api/v1/applications/${APP_NAME}/sync

  notify:
    needs: [build-and-push, update-gitops-repo]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.update-gitops-repo.result }}" = "success" ]; then
            echo "✅ Deployment successful for ${{ github.ref_name }}"
          else
            echo "❌ Deployment failed for ${{ github.ref_name }}"
          fi
